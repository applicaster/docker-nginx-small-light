env UPSTREAM_BASE_URL;

worker_processes  auto;
events {
    worker_connections  1024;
}

error_log /dev/stderr error;

http {
    perl_set $upstream_base_url 'sub { return $ENV{"UPSTREAM_BASE_URL"}; }';
    perl_set $upstream_host '
        sub {
            $ENV{"UPSTREAM_BASE_URL"} =~ /^https?:\/\/([^\/]*)/;
            return $1;
        }
    ';

    include       mime.types;
    default_type  application/octet-stream;

    access_log /dev/stdout;

    sendfile    on;
    tcp_nopush  on;
    tcp_nodelay on;
    keepalive_timeout 65;

    proxy_cache_path /var/nginx/cache
      levels=1:2
      keys_zone=cache-space:4m
      inactive=60d
      max_size=500M;

    proxy_temp_path /var/nginx/tmp;

    proxy_cache cache-space;
    proxy_cache_lock on;
    proxy_cache_valid 30d;
    proxy_cache_valid any 15s;
    proxy_cache_use_stale error
                          timeout
                          invalid_header
                          updating
                          http_500
                          http_502
                          http_503
                          http_504;
    


    server {
      resolver 8.8.8.8;

      listen 80;
      server_name frontend;
      root /etc/nginx/html;

      set $jpeg_quality 95;

      location /health {
        return 200 "OK";
      }

      location / {
          expires     max;
          add_header  Cache-Control public;
          add_header  Last-Modified "";
          add_header  ETag "";

          set $resize_parameters 1; 

          if ($arg_command = "") {
            set $resize_parameters 0;
          }

          if ($arg_width = "") { 
            set $resize_parameters 0; 
          }

          if ($arg_height = "" ) { 
            set $resize_parameters 0; 
          }

          if ($resize_parameters = 1) { 
            proxy_pass http://127.0.0.1:8080/small_light(dw=$arg_width,dh=$arg_height,da=h,q=$jpeg_quality,e=imagemagick,jpeghint=y)$uri;
          }

          proxy_pass $upstream_base_url$uri;
      }
    }


    server {
      resolver 8.8.8.8;

      listen 8080;
      server_name small_light;

      small_light on;
      small_light_buffer 10M;


      location ~ small_light[^/]*/(.+)$ {
          set $file $1;
          proxy_pass http://127.0.0.1:8081/$file;
          allow 127.0.0.0/8;
          deny all;
      }

      location ~ ^/upstream/(.*)$ {
      }
    }

    server {
      resolver 8.8.8.8;

      listen 8081;
      server_name upstream;

      location ~ ^/(.*)$ {
        set $upstream_path $1;
        proxy_set_header    Host    $upstream_host;
        proxy_pass                  $upstream_base_url/$upstream_path;
      }
    }
 }
